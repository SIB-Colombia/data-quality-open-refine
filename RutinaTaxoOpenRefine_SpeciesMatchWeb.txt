----------------------------------------------------------------------------
SiB Colombia scripts for Biodiversity data cleaning in OPEN REFINE
Language: GERL
Date:2018-04-10
Contributors: Ricardo Ortiz, Camila Plata
Name: Species matching from web search

Procedure: 
1-Matches original data with species matching output (by id or scientific name)
2-Retrieves GBIF's rank and status allowing the user to evaluate the state of each name
3-Retrieves GBIF's higher taxonomy for all names
4-Compares GBIF'S taxonomic suggestions with original taxonomy


Conditions
File obtained from speciesMatching GBIF named as 'normalized'
Dataset with columns 'scientificName','scientificName',

Important
The limit of GBIF speciesMatching web service in a single query is 6000 occurrences. 
Thus, you have two options to perform the taxon name matching:

1-Using occurenceID, dataset below 6000 occurrences, GBIF speciesMatching should be perform for all occurrences
2-Using scientificName, dataset above 6000 occurrences, GBIF speciesMatching should be perform for unique scientific names of the dataset

According to the option you use replace 'verbatimScientificName' for 'originalID'
According to the option you use replace 'occurrenceID' for 'scientificName'

Warnings
New data will be stored in columns at the beginning of the dataset

Conventions

----------------------------------------------------------------------------

  {
    "op": "core/column-addition",
    "description": "Create column genus_GBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"genus\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedGenus",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"genus\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column genusValidation at index 1 based on column kingdom using expression grel:if(value==cells[\"suggestedGenus\"].value,1,0)\"",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "genusValidation",
    "columnInsertIndex": 1,
    "baseColumnName": "genus",
    "expression": "grel:if(value==cells[\"suggestedGenus\"].value,1,0)\"",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column genus to position 1",
    "columnName": "genus",
    "index": 1
  },
  {
    "op": "core/column-addition",
    "description": "Create column familyGBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"family\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedFamily",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"family\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column familyValidation at index 1 based on column kingdom using expression grel:if(value==cells[\"suggestedFamily\"].value,1,0)\"",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "familyValidation",
    "columnInsertIndex": 1,
    "baseColumnName": "family",
    "expression": "grel:if(value==cells[\"suggestedFamily\"].value,1,0)\"",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column family to position 1",
    "columnName": "family",
    "index": 1
  },
  {
    "op": "core/column-addition",
    "description": "Create column order_GBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"order\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedOrder",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"order\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column orderValidation at index 1 based on column kingdom using expression grel:if(value==cells[\"suggestedOrder\"].value,1,0)\"",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "orderValidation",
    "columnInsertIndex": 1,
    "baseColumnName": "order",
    "expression": "grel:if(value==cells[\"suggestedOrder\"].value,1,0)\"",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column order to position 1",
    "columnName": "order",
    "index": 1
  },
 {
    "op": "core/column-addition",
    "description": "Create column classGBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"class\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedClass",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"class\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column classValidation at index 1 based on column kingdom using expression grel:if(value==cells[\"suggestedClass\"].value,1,0)\"",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "classValidation",
    "columnInsertIndex": 1,
    "baseColumnName": "class",
    "expression": "grel:if(value==cells[\"suggestedClass\"].value,1,0)\"",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column class to position 1",
    "columnName": "class",
    "index": 1
  },  
  {
    "op": "core/column-addition",
    "description": "Create column phylumGBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"phylum\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedPhylum",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"phylum\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column phylumValidation at index 1 based on column kingdom using expression grel:if(value==cells[\"suggestedPhylum\"].value,1,0)\"",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "phylumValidation",
    "columnInsertIndex": 1,
    "baseColumnName": "phylum",
    "expression": "grel:if(value==cells[\"suggestedPhylum\"].value,1,0)\"",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column phylum to position 1",
    "columnName": "phylum",
    "index": 1
  },
  {
    "op": "core/column-addition",
    "description": "Create column kingdomGBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"kingdom\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedKingdom",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"kingdom\"].value[0]",
    "onError": "set-to-blank"
  },
    {
    "op": "core/column-addition",
    "description": "Create column kingdomValidation at index 1 based on column kingdom using expression grel:if(value==cells[\"suggestedKingdom\"].value,1,0)\"",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "kingdomValidation",
    "columnInsertIndex": 1,
    "baseColumnName": "kingdom",
    "expression": "grel:if(value==cells[\"suggestedKingdom\"].value,1,0)\"",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column kingdom to position 1",
    "columnName": "kingdom",
    "index": 1
  },
  {
    "op": "core/column-addition",
    "description": "Create column scientificNameGBIF at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"scientificName\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedScientificName",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"scientificName\"].value[0]",
    "onError": "set-to-blank"
  },
      {
    "op": "core/column-move",
    "description": "Move column scientificName to position 1",
    "columnName": "scientificName",
    "index": 1
  },
  {
    "op": "core/column-addition",
    "description": "Create column canonicalName at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"species\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "acceptedName",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"species\"].value[0]",
    "onError": "set-to-blank"
  },
    {
    "op": "core/column-addition",
    "description": "Create column MatchType at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"matchType\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "MatchType",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"matchType\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column status at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"status\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "status",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"status\"].value[0]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column rank at index 1 based on column scientificName using expression grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"rank\"].value[0]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "rank",
    "columnInsertIndex": 1,
    "baseColumnName": "scientificName",
    "expression": "grel:cell.cross(\"normalized\",\"verbatimScientificName\").cells[\"rank\"].value[0]",
    "onError": "set-to-blank"
  }