

###Limpieza taxonómica. Este script de OpenRefine cruza el nombre científico con el backbone taxonómico de GBIF a través del API. Adicionalmente trae la taxonomía superior, taxonRank, taxonomicStatus, scientificName con autoría.

Con este script se puede generar el reporte para el publicador con las coincidencias del nombre científico y taxonomía contra el backbone taxonómico en las columnas "Validation", donde "1" significa que coincide y "0" no.


 {
    "op": "core/column-addition",
    "description": "Create column NomAPI at index 2 based on column scientificName using expression grel:value.replace(\" \",\"%20\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "NomAPI",
    "columnInsertIndex": 2,
    "baseColumnName": "scientificName",
    "expression": "grel:value.replace(\" \",\"%20\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "description": "Create column callAPI at index 2 by fetching URLs based on column NomAPI using expression grel:\"http://api.gbif.org/v1/species/match?strict=true&name=\"+value",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "callAPI",
    "columnInsertIndex": 2,
    "baseColumnName": "NomAPI",
    "urlExpression": "grel:\"http://api.gbif.org/v1/species/match?strict=true&name=\"+value",
    "onError": "set-to-blank",
    "delay": 250,
    "cacheResponses": true
  },

  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedGenus at index 2 based on column callAPI using expression grel:value.parseJson().get(\"genus\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedGenus",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"genus\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column genusValidation at index 2 based on column suggestedGenus using expression grel:if(value==cells[\"genus\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "genusValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "suggestedGenus",
    "expression": "grel:if(value==cells[\"genus\"].value,1,0)",
    "onError": "set-to-blank"
  },

  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedFamily at index 2 based on column callAPI using expression grel:value.parseJson().get(\"family\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedFamily",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"family\")",
    "onError": "set-to-blank"
  },
  
    {
    "op": "core/column-addition",
    "description": "Create column familyValidation at index 2 based on column suggestedFamily using expression grel:if(value==cells[\"family\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "familyValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "suggestedFamily",
    "expression": "grel:if(value==cells[\"family\"].value,1,0)",
    "onError": "set-to-blank"
  },
  
  

  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedOrder at index 2 based on column callAPI using expression grel:value.parseJson().get(\"order\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedOrder",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"order\")",
    "onError": "set-to-blank"
  },
  
    {
    "op": "core/column-addition",
    "description": "Create column orderValidation at index 2 based on column suggestedOrder using expression grel:if(value==cells[\"order\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "orderValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "suggestedOrder",
    "expression": "grel:if(value==cells[\"order\"].value,1,0)",
    "onError": "set-to-blank"
  },
  

  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedClass at index 2 based on column callAPI using expression grel:value.parseJson().get(\"class\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedClass",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"class\")",
    "onError": "set-to-blank"
  },
  
   {
    "op": "core/column-addition",
    "description": "Create column classValidation at index 2 based on column suggestedClass using expression grel:if(value==cells[\"class\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "classValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "suggestedClass",
    "expression": "grel:if(value==cells[\"class\"].value,1,0)",
    "onError": "set-to-blank"
  },
  

  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedPhylum at index 2 based on column callAPI using expression grel:value.parseJson().get(\"phylum\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedPhylum",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"phylum\")",
    "onError": "set-to-blank"
  },
  
    {
    "op": "core/column-addition",
    "description": "Create column phylumValidation at index 2 based on column suggestedPhylum using expression grel:if(value==cells[\"phylum\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "phylumValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "suggestedPhylum",
    "expression": "grel:if(value==cells[\"phylum\"].value,1,0)",
    "onError": "set-to-blank"
  },
 
 
 
  {
    "op": "core/column-addition",
    "description": "Create column suggstedKingdom at index 2 based on column callAPI using expression grel:value.parseJson().get(\"kingdom\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedKingdom",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"kingdom\")",
    "onError": "set-to-blank"
  },
    {
    "op": "core/column-addition",
    "description": "Create column kingdomValidation at index 2 based on column suggstedKingdom using expression grel:if(value==cells[\"kingdom\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "kingdomValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "suggestedKingdom",
    "expression": "grel:if(value==cells[\"kingdom\"].value,1,0)",
    "onError": "set-to-blank"
  },

  

  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedTaxonomicStatus at index 2 based on column callAPI using expression grel:value.parseJson().get(\"status\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedTaxonomicStatus",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"status\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedRank at index 2 based on column callAPI using expression grel:value.parseJson().get(\"rank\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedRank",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"rank\")",
    "onError": "set-to-blank"
  },
 


 {
    "op": "core/column-addition",
    "description": "Create column canonicalName at index 2 based on column callAPI using expression grel:value.parseJson().get(\"canonicalName\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "canonicalName(suggested)",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"canonicalName\")",
    "onError": "set-to-blank"
  },
  
  {
    "op": "core/column-addition",
    "description": "Create column canonicalName at index 2 based on column callAPI using expression grel:value.parseJson().get(\"canonicalName\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "acceptedScientificName(species)",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"species\")",
    "onError": "set-to-blank"
  },
  
  
  {
    "op": "core/column-split",
    "description": "Split column acceptedScientificName(species) by separator",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "acceptedScientificName(species)",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": " ",
    "regex": false,
    "maxColumns": 3
  },
 
  
  {
    "op": "core/column-rename",
    "description": "Rename column acceptedScientificName(species) 2 to suggestedSpecificEpithet",
    "oldColumnName": "acceptedScientificName(species) 2",
    "newColumnName": "suggestedSpecificEpithet"
  },
  
  {
    "op": "core/column-removal",
    "description": "Remove column acceptedScientificName(species) 1",
    "columnName": "acceptedScientificName(species) 1"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column acceptedScientificName(species) 3",
    "columnName": "acceptedScientificName(species) 3"
  },
  
{
    "op": "core/column-addition",
    "description": "Create column specificEpithetValidation at index 20 based on column specificEpithet using expression grel:if(value==cells[\"suggestedSpecificEpithet\"].value,1,0)",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "specificEpithetValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "specificEpithet",
    "expression": "grel:if(value==cells[\"suggestedSpecificEpithet\"].value,1,0)",
    "onError": "set-to-blank"
  },
  
  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedScientificName at index 2 based on column callAPI using expression grel:value.parseJson().get(\"scientificName\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "suggestedScientificName",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"scientificName\")",
    "onError": "set-to-blank"
  },
  
  
 
{
    "op": "core/text-transform",
    "description": "Text transform on cells in column suggestedTaxonomicStatus using expression value.toTitlecase()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "columnName": "suggestedTaxonomicStatus",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  
  {
    "op": "core/column-addition",
    "description": "Create column synonym at index 2 based on column callAPI using expression grel:value.parseJson().get(\"synonym\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "synonym",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"synonym\")",
    "onError": "set-to-blank"
  },
  
  {
    "op": "core/column-addition",
    "description": "Create column taxonMatchType at index 2 based on column callAPI using expression grel:value.parseJson().get(\"matchType\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "taxonMatchType",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"matchType\")",
    "onError": "set-to-blank"
  }
 