--------------------------------------------------------------------------------
---Do not copy /No Copiar

--ENGLISH VERSION

SiB Colombia scripts for Biodiversity data validation and cleaning in OPEN REFINE
https://github.com/SIB-Colombia/data-quality-open-refine

Script Taxonomic Validation using GBIF's API
Language: GREL 'General Refine Expression Language'
Created: 2018-04-24
Last Update:2020-02-154
Contributors: Ricardo Ortiz, Camila Plata

This script:
1-Matches original scientificName with GBIF's taxonomic Backbone
2-Retrieves GBIF's rank and status allowing the user to evaluate the state of each name
3-Retrieves GBIF's higher taxonomy for all names
4-Compares GBIF's taxonomic suggestions with original taxonomy using a boolean descriptor (1,0)

			Conventions boolean descriptor
			0-GBIF's suggested name DOES NOT match the original name
			1-GBIF's suggested name matches the original name

Conditions
Dataset with minimum the DwC elements 'scientificName' and 'kingdom'
To obtain a validation of higher taxonomy, these DwC elements are also required:,'phylum','class','order','family','genus'

New data will be stored in columns at the beginning of the dataset
Taxonomy elements are reorganized to facilitate the taxonomic validation

--VERSION EN ESPAÑOL

Rutinas del SiB Colombia para la validación y limpieza de datos primarios 
de Biodiversidad en OPEN REFINE
https://github.com/SIB-Colombia/data-quality-open-refine

Nombre rutina: Validación taxonomica usando el API de GBIF
Languaje: GREL 'General Refine Expression Language'
Creado:2018-04-24
Última Actualización:2019-06-13
Autores: Ricardo Ortiz, Camila Plata

Esta rutina:
1-Compara el elemento scientificName con el árbol taxonómico de GBIF
2-Trae los elementos rank y status permitiendo al usuario evaluar el estado del nombre científico
3-Trae la taxonomia superior de cada nombre de acuerdo a GBIF
4-Compara las sugerencias taxonómicas de GBIF con la taxonomia documentada usando descriptores booleanos (1,0)

			Conventions boolean descriptor
			0- El nombre sugerido por GBIF NO coincide con el nombre documentado en el conjunto de datos
			1- El nombre sugerido por GBIF coincide con con el nombre documentado en el conjunto de datos

Requerimientos:
Conjunto de datos con mínimo los elementos DwC 'scientificName'y 'kingdon' documentados
Para obtener la validación de la taxonomía superior también se requieren los elementos DwC: 'phylum','class','order','family','genus'

Los nuevos datos seran guardados en columnas el inicio del conjunto de datos
Los elementos taxonómicos son reorganizados para facilitar la validación taxonómicas

---Do not copy /No Copiar
--------------------------------------------------------------------------------
Copy from here/ Copiar Desde Aquí
[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column scientificName using expression grel:value.trim().replace(/\\u00A0/,' ').replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "scientificName",
    "expression": "grel:value.trim().replace(/\\u00A0/,' ').replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
 {
    "op": "core/column-addition",
    "description": "Create column NomAPI at index 2 based on column scientificName using expression grel:value.replace(\" \",\"%20\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "NomAPI",
    "columnInsertIndex": 2,
    "baseColumnName": "scientificName",
    "expression": "grel:value.replace(\" \",\"%20\")",
    "onError": "set-to-blank"
  },
   {
    "op": "core/column-addition-by-fetching-urls",
    "description": "Create column callAPI at index 2 by fetching URLs based on column NomAPI using expression grel:\"http://api.gbif.org/v1/species/match?strict=true&name=\"+value+\"&kingdom=\"+cells['kingdom'].value",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "callAPI",
    "columnInsertIndex": 2,
    "baseColumnName": "NomAPI",
    "urlExpression": "grel:\"http://api.gbif.org/v1/species/match?strict=true&name=\"+value+\"&kingdom=\"+cells['kingdom'].value",
    "onError": "set-to-blank",
    "delay": 5,
    "cacheResponses": true
  },
  {
    "op": "core/column-move",
    "description": "Move column infraspecificEpithet to position 2",
    "columnName": "infraspecificEpithet",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column specificEpithetSuggested at index 2 based on column callAPI using expression grel:split(value.parseJson().get(\"canonicalName\"),' ')[1]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "specificEpithetSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:split(value.parseJson().get(\"canonicalName\"),' ')[1]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column specificEpithetValidation at index 2 based on column suggestedSpecificEpithet using expression grel:if(value==cells[\"specificEpithet\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "specificEpithetValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "specificEpithetSuggested",
    "expression": "grel:if(value==cells[\"specificEpithet\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column specificEpithet to position 2",
    "columnName": "specificEpithet",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedGenus at index 2 based on column callAPI using expression grel:if(value.parseJson().get(\"status\")=='SYNONYM',(split(value.parseJson().get(\"canonicalName\"),' ')[0]),value.parseJson().get(\"genus\"))",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "genusSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:if(value.parseJson().get(\"status\")=='SYNONYM',(split(value.parseJson().get(\"canonicalName\"),' ')[0]),value.parseJson().get(\"genus\"))",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column genusValidation at index 2 based on column suggestedGenus using expression grel:if(value==cells[\"genus\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "genusValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "genusSuggested",
    "expression": "grel:if(value==cells[\"genus\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column family to position 2",
    "columnName": "genus",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedFamily at index 2 based on column callAPI using expression grel:value.parseJson().get(\"family\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "familySuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"family\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column familyValidation at index 2 based on column suggestedFamily using expression grel:if(value==cells[\"family\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "familyValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "familySuggested",
    "expression": "grel:if(value==cells[\"family\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column family to position 2",
    "columnName": "family",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedOrder at index 2 based on column callAPI using expression grel:value.parseJson().get(\"order\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "orderSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"order\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column orderValidation at index 2 based on column suggestedOrder using expression grel:if(value==cells[\"order\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "orderValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "orderSuggested",
    "expression": "grel:if(value==cells[\"order\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column order to position 2",
    "columnName": "order",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedClass at index 2 based on column callAPI using expression grel:value.parseJson().get(\"class\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "classSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"class\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column classValidation at index 2 based on column suggestedClass using expression grel:if(value==cells[\"class\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "classValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "classSuggested",
    "expression": "grel:if(value==cells[\"class\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column class to position 2",
    "columnName": "class",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedPhylum at index 2 based on column callAPI using expression grel:value.parseJson().get(\"phylum\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "phylumSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"phylum\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column phylumValidation at index 2 based on column suggestedPhylum using expression grel:if(value==cells[\"phylum\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "phylumValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "phylumSuggested",
    "expression": "grel:if(value==cells[\"phylum\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column phylum to position 2",
    "columnName": "phylum",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggstedKingdom at index 2 based on column callAPI using expression grel:value.parseJson().get(\"kingdom\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "kingdomSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"kingdom\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column kingdomValidation at index 2 based on column suggstedKingdom using expression grel:if(value==cells[\"kingdom\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "kingdomValidation",
    "columnInsertIndex": 2,
    "baseColumnName": "kingdomSuggested",
    "expression": "grel:if(value==cells[\"kingdom\"].value,'1','0').toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column kingdom to position 2",
    "columnName": "kingdom",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedTaxonomicStatus at index 2 based on column callAPI using expression grel:value.parseJson().get(\"status\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "taxonomicStatusSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"status\")",
    "onError": "set-to-blank"
  },  
  {
    "op": "core/column-addition",
    "description": "Create column suggestedRank at index 2 based on column callAPI using expression grel:value.parseJson().get(\"rank\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "taxonRankSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"rank\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column canonicalNameSuggested at index 2 based on column callAPI using expression grel:value.parseJson().get(\"canonicalName\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "canonicalNameSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"canonicalName\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column acceptedScientificName(species) at index 2 based on column callAPI using expression grel:value.parseJson().get(\"species\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "acceptedScientificName",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"species\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column suggestedScientificName at index 2 based on column callAPI using expression grel:value.parseJson().get(\"scientificName\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "scientificNameSuggested",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"scientificName\")",
    "onError": "set-to-blank"
  },
   {
    "op": "core/column-addition",
    "description": "Create column suggestedscientificNameAuthorship at index 4 based on column suggestedScientificName using expression grel:value.partition(cells[\"canonicalNameSuggested\"].value)[2]",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },

    "newColumnName": "scientificNameAuthorshipSuggested",
    "columnInsertIndex": 5,
    "baseColumnName": "scientificNameSuggested",
    "expression": "grel:value.partition(cells[\"canonicalNameSuggested\"].value)[2].trim()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column authorshipValidation at index 2 based on column suggstedAuthorship using expression grel:if(value==cells[\"scientificNameAuthorship\"].value,'1','0').toString()",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "scientificNameAuthorshipValidation",
    "columnInsertIndex": 5,
    "baseColumnName": "scientificNameAuthorship",
    "expression": "grel:if(value==cells['scientificNameAuthorshipSuggested'].value,1,0).toString()",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-move",
    "description": "Move column scientificNameAuthorship to position 5",
    "columnName": "scientificNameAuthorship",
    "index": 5
  },
  
   {
    "op": "core/column-move",
    "description": "Move column scientificName to position 2",
    "columnName": "scientificName",
    "index": 2
  },
  {
    "op": "core/column-addition",
    "description": "Create column taxonMatchType at index 2 based on column callAPI using expression grel:value.parseJson().get(\"matchType\")",
    "engineConfig": {
      "mode": "row-based",
      "facets": []
    },
    "newColumnName": "taxonMatchType",
    "columnInsertIndex": 2,
    "baseColumnName": "callAPI",
    "expression": "grel:value.parseJson().get(\"matchType\")",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column scientificNameSuggested",
    "columnName": "scientificNameSuggested"
  }
]
